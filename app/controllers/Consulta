CONSULTA

Model com vários atributos: tipos Date, String e Integer.

Validação, teste de duplicidade e calculo de idade.

CRUD completo: funções form, salvar, listar (e calculo de quantidade de algum atributo), detalhar e remover.

Formulário abrangente, table para listagem, links de remoção e detalhamento, além de uma página dedicada ao detalhamento.

Inicializador: pra começar com dados.

CSS.



controller 1 :


package controllers;

import java.util.List;

import models.Usuario;
import play.mvc.Controller;

public class Usuarios extends Controller {

    public static void form() {
        render();
    }

    public static void salvar(Usuario usu) {

        if (usu.validacao() == false || usu.duplicidade() == false) {
            form();
        }

        usu.save();
        listar();
    }

    public static void listar() {
        Integer totalDePets = 0;
        List<Usuario> lista = Usuario.findAll();

        // Fazendo um foreach para calcular a quantidade total de pets
        for (Usuario usu : lista) {
            totalDePets += usu.quantidadeDePets;
        }

        render(lista, totalDePets);
    }

    public static void remover(long id) {
        Usuario usu = Usuario.findById(id);
        usu.delete();
        listar();
    }

    public static void detalhar(long id) {
        Usuario usu = Usuario.findById(id);
        render(usu);
    }
}




inicializador: 

package controllers;

import java.util.Date;

import models.Usuario;
import play.jobs.Job;
import play.jobs.OnApplicationStart;

// Essa essa classe junto com a função doJob ali (ksksksksk), vão ser acionadas assim que o play run ativar
@OnApplicationStart
public class Inicializador extends Job {

    public void doJob() {
        
        // Se não houver nenhum registro salvo de inicio (e claro que não vai ter), esse if executa o codigo dentro dele 
        if (Usuario.count() == 0) {

            // Criando manualemte um registro
            Usuario inicial1 = new Usuario();
            inicial1.nome = "Zé das brenha";
            inicial1.email = "ze@email.com";
            inicial1.cpf = "12345";
            inicial1.vinculoProfissao = "Autônomo";
            inicial1.dataNascimento = new Date(2000 - 1900, 0, 0);
            inicial1.quantidadeDePets = 10;
            // Salvando no BD
            inicial1.save();

            // Criando mais um registro manulamente
            Usuario inicial2 = new Usuario();
            inicial2.nome = "Tião da padaria";
            inicial2.email = "tiao@email.com";
            inicial2.cpf = "54321";
            inicial2.vinculoProfissao = "Funcionário Público";
            inicial2.dataNascimento = new Date(2010 - 1900, 5, 12);
            inicial2.quantidadeDePets = 1;
            // Salvando no BD
            inicial2.save();

            // Criando o ultimo registro na "mão"
            Usuario inicial3 = new Usuario();
            inicial3.nome = "Maquito das manga";
            inicial3.email = "maquito@email.com";
            inicial3.cpf = "98765";
            inicial3.vinculoProfissao = "Desempregado";
            inicial3.dataNascimento = new Date(1996 - 1900, 7, 8);
            inicial3.quantidadeDePets = 2;
            // Salvando no BD
            inicial3.save();

        }
    }
}




model 1:

package models;

import java.time.Year;
import java.util.Calendar;
import java.util.Date;

import javax.persistence.Entity;
import javax.persistence.Transient;

import play.db.jpa.Model;

@Entity
public class Usuario extends Model {

    public String nome;
    public String email;
    public String cpf;
    public String vinculoProfissao;
    public Date dataNascimento;
    public Integer quantidadeDePets;
    @Transient // Se cair um atributo idade, coloque esse arroba em cima dele do jeito que tá aí
    public Integer idade;

    // Validação de dados
    public boolean validacao() {

        if (this.nome.isEmpty() || this.cpf.isEmpty() || this.cpf.isEmpty() || this.vinculoProfissao.isEmpty() // Validação de Strings
                || this.dataNascimento == null || this.dataNascimento.after(new Date()) // Validação de tipo Date
                || this.quantidadeDePets == null || this.quantidadeDePets < 0) { // Validação de Integer/Double (Com D maisculo)
                    // Sysout se vê na tela preta que escreve play run
                    System.out.println("\nErro ao tentar salvar!!!");
                    return false;
        }

        System.out.println("\nTudo certo na validação");
        return true;
    }

    // Teste de duplicidade
    public boolean duplicidade() {
        Usuario usu = Usuario.find("cpf = ?1", this.cpf).first();

        if (usu != null) {
        System.out.println("\nEsse CPF já está registrado!!!");
        return false;
    }
    
    System.out.println("\nTudo certo no teste de duplicidade, salvando novo CPF");
        return true;
    }

    // Para calcular a idade dinamicamente
    // Só copia e cola isso, caso precise
    public Integer getIdade() {
        Calendar calendarDataAtual = Calendar.getInstance();
        Calendar calendarDataNascimento = Calendar.getInstance();

        calendarDataNascimento.setTime(this.dataNascimento);

        int dataAtual = calendarDataAtual.get(Calendar.YEAR);
        int dataNascimento = calendarDataNascimento.get(Calendar.YEAR);

        Integer idade = dataAtual - dataNascimento;

        return idade;
    }

}



View Usuarios - Detalhar:



#{extends 'main.html' /}
#{set title:'Detalhar' /}

<div class="detalhar">

    <div class="title"><strong>Detalhar</strong></div>
  
    <div><strong>Nome: </strong>${usu.nome}</div>
    <div><strong>Email: </strong>${usu.email}</div>
    <div><strong>CPF: </strong>${usu.cpf}</div>
    <div><strong>Vínculo Profissão: </strong>${usu.vinculoProfissao}</div>
    <div><strong>Data de nascimento: </strong>${usu.dataNascimento.format('dd/MM/yyyy')}</div>
    <div><strong>Idade: </strong>${usu.idade} anos</div>
    <div><strong>Quantidade de pets: </strong>${usu.quantidadeDePets}</div>
</div>


view Usuario-form :



#{extends 'main.html' /}
#{set title:'Formulário' /}


<form action="@{Usuarios.salvar}" method="post">

    <h1>Cadastro</h1>

    <label>Nome</label>
    <input type="text" name="usu.nome">

    <label>Email</label>
    <input type="text" name="usu.email">

    <label>CPF</label>
    <input type="text" name="usu.cpf">

    <label>Vinculo profissão</label>
    <select name="usu.vinculoProfissao">
        <option value="Autônomo">Autônomo</option>
        <option value="Celetista">Celetista</option>
        <option value="Funcionário Público">Funcionário Público</option>
        <option value="Desempregado">Desempregado</option>
    </select>

    <label>Data de nascimento</label>
    <input type="date" name="usu.dataNascimento">

    <label>Quantidade de pets</label>
    <input type="number" name="usu.quantidadeDePets">

    <button type="submit">Salvar</button>

</form>




views Usuario-listar:


#{extends 'main.html' /}
#{set title:'Listagem' /}


<div class="totalPets">
    <strong>Quantidade total de pets: </strong> ${totalDePets}
</div>

<table>

    <tr>
        <th class="title" colspan="8">Listagem</th>
    </tr>

    <tr>
        <th>Nome</th>
        <th>Email</th>
        <th>CPF</th>
        <th>Vínculo profissão</th>
        <th>Data de nascimento</th>
        <th>Idade</th>
        <th>Quantidade de pets</th>
        <th>Remoção</th>
    </tr>

    #{list items: lista, as:'usuario'}

    <tr>
        <td><a href="@{Usuarios.detalhar(usuario.id)}">${usuario.nome}</a></td>
        <td>${usuario.email}</td>
        <td>${usuario.cpf}</td>
        <td>${usuario.vinculoProfissao}</td>
        <td>${usuario.dataNascimento.format("dd/MM/yyyy")}</td>
        <td>${usuario.idade} anos</td>
        <td>${usuario.quantidadeDePets}</td>
        <td><a href="@{Usuarios.remover(usuario.id)}">Remover</a></td>
    </tr>

    #{/list}

</table>



main :

<!-- <!DOCTYPE html>

<html>
    <head>
        <title>#{get 'title' /}</title>
        <meta charset="${_response_encoding}">
        <link rel="stylesheet" media="screen" href="@{'/public/stylesheets/main.css'}">
        #{get 'moreStyles' /}
        <link rel="shortcut icon" type="image/png" href="@{'/public/images/favicon.png'}">
    </head>
    <body>
        <a href="@{Usuarios.form}">Formulário</a>
        <a href="@{Usuarios.listar}">Listagem</a>
        #{doLayout /}
        
        <script src="@{'/public/javascripts/jquery-1.6.4.min.js'}" type="text/javascript" charset="${_response_encoding}"></script>
        #{get 'moreScripts' /}
    </body>
</html> -->



Projeto 2 :



Classes de Modelo (Models):


Imovel: Deve representar um imóvel com os seguintes atributos: codigoAnuncio, bairro, quantidadeComodos, areaInterna, areaExterna e tipoImovel.


TipoImovel: Deve ter um atributo descricao e a capacidade de realizar exclusão lógica. Exemplos de tipos são CASA, APARTAMENTO e CHALÉ.



Controladores e Funcionalidades (Controllers):


CRUD de TipoImovel: O sistema deve permitir a criação, leitura, atualização e exclusão de tipos de imóveis. A exclusão deve ser lógica, ou seja, o registro não é removido do banco de dados.



CRUD de Imovel: O sistema deve ter a funcionalidade de criar, ler, atualizar e excluir imóveis. A interface de cadastro de 

Imovel deve apresentar o campo tipoImovel como um select ou radio button.


Relacionamento: Um Imovel deve estar associado a um TipoImovel. A relação deve ser representada usando anotações adequadas nas classes de modelo.



Cálculo de Área Total: A funcionalidade de listagem de imóveis deve exibir a área total de cada imóvel, que é a soma de areaInterna e areaExterna.


Restrição: Não deve ser possível ter mais de um imóvel com o mesmo codigoAnuncio no banco de dados.

Views:

As views (arquivos 

.html) serão responsáveis por apresentar as interfaces de CRUD para Imovel e TipoImovel, além da listagem de imóveis com a área total calculada.

Outros Pontos:

O framework Play 1.5.3 deve ser usado para auxiliar no desenvolvimento.

É sugerido criar uma classe 

Job chamada Inicializador para popular o banco de dados com dados de teste ao iniciar a aplicação.

A seguir, apresento uma estrutura de projeto com as classes de modelo, controladores e a lógica para as views, tudo comentado para facilitar o entendimento.

Observação: O código abaixo é um exemplo e precisa ser adaptado e completado com a lógica de negócio específica, validações e a sintaxe correta do framework Play 1.5.3.

Estrutura do Projeto
app/

controllers/

Imoveis.java

TiposImoveis.java

models/

Imovel.java

TipoImovel.java

views/

Imoveis/

listagem.html

formulario.html

TiposImoveis/

listagem.html

formulario.html

conf/

application.conf

jobs/

Inicializador.java



Modelos (app/models)
app/models/TipoImovel.java

package models;

import play.db.jpa.Model;
import javax.persistence.Entity;

// A anotação @Entity informa ao framework que esta classe é um modelo de dados.
@Entity
public class TipoImovel extends Model {

    // Atributo 'descricao' para o nome do tipo de imóvel (ex: CASA, APARTAMENTO).
    public String descricao;

    // Atributo 'ativo' para a exclusão lógica.
    // Se 'ativo' for 'true', o registro está "disponível".
    // Se for 'false', o registro está "excluído logicamente".
    public boolean ativo = true;

    // Método para marcar o tipo de imóvel como logicamente excluído.
    public void deletarLogicamente() {
        this.ativo = false;
        this.save(); // Salva a alteração no banco de dados.
    }
}


app/models/Imovel.java


package models;

import play.db.jpa.Model;
import javax.persistence.Entity;
import javax.persistence.ManyToOne;
import javax.persistence.Column;

// A anotação @Entity informa ao framework que esta classe é um modelo de dados.
@Entity
public class Imovel extends Model {

    // Anotação para garantir que o 'codigoAnuncio' seja único no banco de dados.
    // Isso evita registros duplicados com o mesmo código.
    @Column(unique = true)
    public String codigoAnuncio;

    public String bairro;
    public int quantidadeComodos;
    public double areaInterna;
    public double areaExterna;

    // Anotação @ManyToOne para mapear o relacionamento.
    // Muitos imóveis podem ter um mesmo tipo de imóvel (ex: Vários imóveis do tipo CASA).
    @ManyToOne
    public TipoImovel tipoImovel;

    // Método para calcular a área total do imóvel.
    // É uma boa prática ter essa lógica de negócio no próprio modelo.
    public double getAreaTotal() {
        return this.areaInterna + this.areaExterna;
    }
}




Controladores (app/controllers)
app/controllers/TiposImoveis.java





package controllers;

import play.mvc.Controller;
import java.util.List;
import models.TipoImovel;

public class TiposImoveis extends Controller {

    // Ação para listar todos os tipos de imóveis ativos.
    public static void index() {
        // Busca todos os tipos de imóveis onde o atributo 'ativo' é 'true'.
        List<TipoImovel> tipos = TipoImovel.find("ativo", true).fetch();
        // Renderiza a view de listagem, passando a lista de tipos.
        render(tipos);
    }

    // Ação para exibir o formulário de cadastro ou edição.
    public static void form(Long id) {
        if (id == null) {
            // Se o ID for nulo, cria uma nova instância para o formulário de cadastro.
            render();
        } else {
            // Se o ID não for nulo, busca o tipo de imóvel para edição.
            TipoImovel tipo = TipoImovel.findById(id);
            // Renderiza o formulário, passando o objeto para preencher os campos.
            render(tipo);
        }
    }

    // Ação para salvar um tipo de imóvel.
    public static void salvar(TipoImovel tipoImovel) {
        // O método 'save()' do Play Framework lida com a criação e atualização.
        tipoImovel.save();
        // Redireciona para a página de listagem após salvar.
        index();
    }

    // Ação para exclusão lógica de um tipo de imóvel.
    public static void remover(Long id) {
        // Encontra o tipo de imóvel pelo ID.
        TipoImovel tipo = TipoImovel.findById(id);
        // Chama o método que criamos no modelo para a exclusão lógica.
        tipo.deletarLogicamente();
        // Redireciona para a página de listagem.
        index();
    }
}



app/controllers/Imoveis.java


package controllers;

import play.mvc.Controller;
import java.util.List;
import models.Imovel;
import models.TipoImovel;

public class Imoveis extends Controller {

    // Ação para listar todos os imóveis.
    public static void index() {
        List<Imovel> imoveis = Imovel.findAll();
        // Renderiza a view de listagem, passando a lista de imóveis.
        render(imoveis);
    }

    // Ação para exibir o formulário de cadastro ou edição.
    public static void form(Long id) {
        // Busca todos os tipos de imóveis ativos para popular o select/radio button.
        List<TipoImovel> tipos = TipoImovel.find("ativo", true).fetch();
        if (id == null) {
            render(tipos);
        } else {
            Imovel imovel = Imovel.findById(id);
            render(imovel, tipos);
        }
    }

    // Ação para salvar um imóvel.
    public static void salvar(Imovel imovel) {
        // O framework Play se encarrega de associar o TipoImovel selecionado ao Imovel.
        imovel.save();
        index();
    }

    // Ação para remover um imóvel.
    public static void remover(Long id) {
        Imovel imovel = Imovel.findById(id);
        imovel.delete(); // Exclusão física do banco de dados (o requisito não especifica exclusão lógica para Imóvel).
        index();
    }
}






Views (app/views)
app/views/Imoveis/listagem.html



<!-- <h1>Listagem de Imóveis</h1>
<a href="@{Imoveis.form()}">Cadastrar Novo Imóvel</a>

<table>
    <thead>
        <tr>
            <th>Código</th>
            <th>Bairro</th>
            <th>Tipo</th>
            <th>Área Total</th>
            <th>Ações</th>
        </tr>
    </thead>
    <tbody>
        #{list items:imoveis, as:'imovel'}
            <tr>
                <td>${imovel.codigoAnuncio}</td>
                <td>${imovel.bairro}</td>
                <td>${imovel.tipoImovel.descricao}</td>
                <td>${imovel.getAreaTotal()} m²</td>
                <td>
                    <a href="@{Imoveis.form(imovel.id)}">Editar</a>
                    <a href="@{Imoveis.remover(imovel.id)}" onclick="return confirm('Tem certeza?');">Remover</a>
                </td>
            </tr>
        #{/list}
    </tbody>
</table> -->

app/views/Imoveis/formulario.html



<h1>Cadastro de Imóvel</h1>
#{form @Imoveis.salvar()}
    #{if imovel?.id}
        <input type="hidden" name="imovel.id" value="${imovel.id}" />
    #{/if}
    
    <label>Código do Anúncio:</label>
    <input type="text" name="imovel.codigoAnuncio" value="${imovel?.codigoAnuncio}" />
    
    <label>Bairro:</label>
    <input type="text" name="imovel.bairro" value="${imovel?.bairro}" />

    <label>Quantidade de Cômodos:</label>
    <input type="number" name="imovel.quantidadeComodos" value="${imovel?.quantidadeComodos}" />

    <label>Área Interna:</label>
    <input type="number" name="imovel.areaInterna" value="${imovel?.areaInterna}" step="0.01" />

    <label>Área Externa:</label>
    <input type="number" name="imovel.areaExterna" value="${imovel?.areaExterna}" step="0.01" />
    
    <label>Tipo do Imóvel:</label>
    <select name="imovel.tipoImovel.id">
        #{list items:tipos, as:'tipo'}
            <option value="${tipo.id}" ${imovel?.tipoImovel?.id == tipo.id ? 'selected' : ''}>
                ${tipo.descricao}
            </option>
        #{/list}
    </select>
    
    <button type="submit">Salvar</button>
#{/form}


Job de Inicialização (app/jobs/Inicializador.java)



package jobs;

import play.jobs.Job;
import play.jobs.OnApplicationStart;
import models.TipoImovel;

// A anotação @OnApplicationStart garante que este job será executado na inicialização da aplicação.
@OnApplicationStart
public class Inicializador extends Job {

    @Override
    public void doJob() throws Exception {
        // Verifica se já existem tipos de imóveis no banco de dados.
        // Isso evita a duplicação de dados de teste a cada reinicialização.
        if (TipoImovel.count() == 0) {
            // Cria e salva tipos de imóveis de exemplo.
            new TipoImovel("CASA").save();
            new TipoImovel("APARTAMENTO").save();
            new TipoImovel("CHALÉ").save();
        }
    }
}

msg flashes :  



success: Para indicar que uma operação foi bem-sucedida.

Exemplo no controlador: flash.success("Item salvo com sucesso!");

error: Para indicar que algo deu errado, como uma validação que falhou ou um problema no sistema.

Exemplo no controlador: flash.error("Ocorreu um erro ao processar sua requisição.");

warning: Para avisos que não impedem a operação, mas que o usuário deve estar ciente.

Exemplo no controlador: flash.warning("Atenção: alguns campos não foram preenchidos.");

info: Para informações gerais que não se enquadram nas categorias acima.

Exemplo no controlador: flash.info("Sua sessão irá expirar em breve.");

A chave que você usa no controlador (ex: flash.success) é a mesma que você usará na view para verificar se a mensagem existe (ex: #{if flash.success}). A flexibilidade do flash permite que você crie chaves personalizadas se necessário.


Exemplo prático (usando o projeto de Imóveis)
Vamos supor que você queira exibir uma mensagem de sucesso após salvar um imóvel.

1. No Controlador (app/controllers/Imoveis.java)
Modifique o método salvar para adicionar uma mensagem flash antes de redirecionar.




package controllers;

import play.mvc.Controller;
import java.util.List;
import models.Imovel;
import models.TipoImovel;

public class Imoveis extends Controller {
    // ... outros métodos

    public static void salvar(Imovel imovel) {
        imovel.save();
        // Armazena uma mensagem de sucesso na chave "success".
        // O valor da mensagem será "Imóvel salvo com sucesso!".
        flash.success("Imóvel salvo com sucesso!");
        // Redireciona para a página de listagem.
        index();
    }

    // ... outros métodos
}


Na View (app/views/Imoveis/listagem.html)
Adicione um bloco de código no início da view para verificar e exibir a mensagem.



<!-- 
<h1>Listagem de Imóveis</h1>
<a href="@{Imoveis.form()}">Cadastrar Novo Imóvel</a>

#{if flash.success}
    <div class="alert alert-success">
        ${flash.success}
    </div>
#{/if}

#{if flash.error}
    <div class="alert alert-error">
        ${flash.error}
    </div>
#{/if}

<table>
    <thead>
        <tr>
            <th>Código</th>
            <th>Bairro</th>
            <th>Tipo</th>
            <th>Área Total</th>
            <th>Ações</th>
        </tr>
    </thead>
    <tbody>
        #{list items:imoveis, as:'imovel'}
            <tr>
                <td>${imovel.codigoAnuncio}</td>
                <td>${imovel.bairro}</td>
                <td>${imovel.tipoImovel.descricao}</td>
                <td>${imovel.getAreaTotal()} m²</td>
                <td>
                    <a href="@{Imoveis.form(imovel.id)}">Editar</a>
                    <a href="@{Imoveis.remover(imovel.id)}" onclick="return confirm('Tem certeza?');">Remover</a>
                </td>
            </tr>
        #{/list}
    </tbody>
</table> -->

Você pode usar o flash para diferentes tipos de mensagens, como erros:

No controlador: flash.error("Ocorreu um erro ao salvar o imóvel.");

Na view: Use a mesma lógica para exibir flash.error.





