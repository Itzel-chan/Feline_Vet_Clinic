Estrutura do Projeto (Exemplo com ManyToMany)
app/

controllers/

Produtos.java

Categorias.java

models/

Produto.java

Categoria.java

views/

Produtos/

listagem.html

formulario.html

Categorias/

listagem.html

formulario.html





Modelos (app/models)
app/models/Categoria.java






// package models;

// import play.db.jpa.Model;
// import javax.persistence.Entity;
// import javax.persistence.ManyToMany;
// import java.util.List;

// A anotação @Entity informa ao framework que esta classe é um modelo de dados.
// @Entity
// public class Categoria extends Model {

    // Nome da categoria (ex: Eletrônicos, Livros, Promoções).
    // public String nome;

    // A anotação @ManyToMany define o relacionamento.
    // Uma categoria pode ter muitos produtos.
    // O 'mappedBy' indica que a associação é mapeada pela classe Produto.
    // Isso significa que a tabela de junção será gerenciada pelo lado do Produto.
//     @ManyToMany(mappedBy = "categorias")
//     public List<Produto> produtos;
    
// }



 app/models/Produto.java


// package models;

// import play.db.jpa.Model;
// import javax.persistence.Entity;
// import javax.persistence.ManyToMany;
// import java.util.List;

// A anotação @Entity informa ao framework que esta classe é um modelo de dados.
// @Entity
// public class Produto extends Model {

    // Nome do produto.
    // public String nome;
    
    // Preço do produto.
    // public double preco;

    // A anotação @ManyToMany define o relacionamento.
    // Um produto pode estar em muitas categorias.
    // O Play Framework, em conjunto com o Hibernate, cria automaticamente uma tabela de junção
    // para gerenciar essa relação.
    // O 'cascade' é opcional e serve para propagar operações (como salvar ou deletar).
    // @ManyToMany
    // public List<Categoria> categorias;

// }



 Controladores (app/controllers)
app/controllers/Categorias.java





// package controllers;

// import play.mvc.Controller;
// import models.Categoria;
// import java.util.List;

// public class Categorias extends Controller {

    // Ação para listar todas as categorias.
    // public static void index() {
    //     List<Categoria> categorias = Categoria.findAll();
    //     render(categorias);
    // }

    // Ação para exibir o formulário de cadastro ou edição de uma categoria.
    // public static void form(Long id) {
    //     if (id == null) {
    //         render();
    //     } else {
    //         Categoria categoria = Categoria.findById(id);
    //         render(categoria);
    //     }
    // }

    // Ação para salvar uma categoria.
//     public static void salvar(Categoria categoria) {
//         categoria.save();
//         index();
//     }
// }




app/controllers/Produtos.java




// package controllers;

// import play.mvc.Controller;
// import models.Produto;
// import models.Categoria;
// import java.util.List;
// import java.util.ArrayList;

// public class Produtos extends Controller {

//     // Ação para listar todos os produtos.
//     public static void index() {
//         List<Produto> produtos = Produto.findAll();
//         render(produtos);
//     }

    // Ação para exibir o formulário de cadastro ou edição de um produto.
    // public static void form(Long id) {
        // Busca todas as categorias para popular as opções do formulário.
    //     List<Categoria> categorias = Categoria.findAll();
        
    //     if (id == null) {
    //         render(categorias);
    //     } else {
    //         Produto produto = Produto.findById(id);
    //         render(produto, categorias);
    //     }
    // }

    // Ação para salvar um produto e suas associações com categorias.
    // public static void salvar(Produto produto, Long[] categoriasId) {
        // O Play Framework 1.x pode precisar de uma lógica manual para atualizar associações ManyToMany.
        // Se categoriasId não for nulo, buscamos as categorias selecionadas.
        // if (categoriasId != null) {
        //     List<Categoria> categoriasSelecionadas = new ArrayList<>();
        //     for (Long categoriaId : categoriasId) {
        //         Categoria categoria = Categoria.findById(categoriaId);
        //         if (categoria != null) {
        //             categoriasSelecionadas.add(categoria);
        //         }
        //     }
            // Associa a lista de categorias ao produto.
        //     produto.categorias = categoriasSelecionadas;
        // } else {
            // Se nenhuma categoria for selecionada, a lista fica vazia.
//             produto.categorias = new ArrayList<>();
//         }
        
//         produto.save();
//         index();
//     }
// }


Views (app/views)
 app/views/Produtos/listagem.html




// <h1>Lista de Produtos</h1>
// <a href="@{Produtos.form()}">Cadastrar Novo Produto</a>

// <table>
//     <thead>
//         <tr>
//             <th>Nome</th>
//             <th>Preço</th>
//             <th>Categorias</th>
//             <th>Ações</th>
//         </tr>
//     </thead>
//     <tbody>
//         #{list items:produtos, as:'produto'}
//             <tr>
//                 <td>${produto.nome}</td>
//                 <td>R$ ${produto.preco}</td>
//                 <td>
//                     #{list items:produto.categorias, as:'categoria'}
//                         <span>${categoria.nome}</span>
//                     #{/list}
//                 </td>
//                 <td>
//                     <a href="@{Produtos.form(produto.id)}">Editar</a>
//                 </td>
//             </tr>
//         #{/list}
//     </tbody>
// </table>


app/views/Produtos/formulario.html



// <h1>Formulário de Produto</h1>
// #{form @Produtos.salvar()}
//     #{if produto?.id}
//         <input type="hidden" name="produto.id" value="${produto.id}" />
//     #{/if}
    
//     <label>Nome:</label>
//     <input type="text" name="produto.nome" value="${produto?.nome}" />
    
//     <label>Preço:</label>
//     <input type="number" name="produto.preco" value="${produto?.preco}" step="0.01" />

//     <label>Categorias:</label>
//     #{list items:categorias, as:'categoria'}
//         <input type="checkbox" name="categoriasId" value="${categoria.id}"
//             ${produto?.categorias.contains(categoria) ? 'checked' : ''} />
//         ${categoria.nome}<br/>
//     #{/list}
    
//     <button type="submit">Salvar</button>
// #{/form}














